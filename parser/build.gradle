/*
 * Copyright 2021 DataCanvas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'antlr'
    id 'java-conventions'
    id 'java-library'
    id 'com.gorylenko.gradle-git-properties' version "${gradleGitPropertiesVersion}"
    id "com.vanniktech.maven.publish"
}

gitProperties {
    keys = gradle.gitPropertiesKeys
}

dependencies {
    antlr group: "org.antlr", name: "antlr4", version: 'antlr'.v()
    api project(':dingo-expr-runtime')
    testImplementation project(':dingo-expr-test')
    implementation project(':dingo-expr-common')
}

generateGrammarSource {
    arguments += ['-package', 'io.dingodb.expr.parser', '-visitor', '-no-listener']
    outputDirectory = file(buildDir.toString() + '/generated-src/antlr/main/io/dingodb/expr/parser/')
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('sourcesJar') {
    dependsOn tasks.named('generateGrammarSource')

    from tasks.named('generateGrammarSource').get().outputs.files
}

tasks.withType(Checkstyle).configureEach {
    // Exclude Antlr4 generated code.
    exclude '**/DingoExprLexer.java'
    exclude '**/DingoExprParser.java'
    exclude '**/DingoExprParserBaseVisitor.java'
    exclude '**/DingoExprParserVisitor.java'
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('JavadocJar') || task.name.contains('SourcesJar')) {
        task.enabled = false
    }
}

afterEvaluate {
    tasks.named("generateMetadataFileForMavenPublication") {
        dependsOn tasks.named("plainJavadocJar")
    }
}

mavenPublishing {
    coordinates(project.property("GROUP") as String, "dingo-expr-parser", project.property("VERSION") as String)
    
    pom {
        name = "dingo-expr-parser" 
        description = "Literal parser of Dingo Expression."
        url= "https://www.dingodb.com/"
        
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
        }
        
        developers {
            developer {
                id = "dingodb"
                name = "DingoDB develop team"
                email = "dingodb@zetyun.com"
            }
        }
        
        scm {
            connection = "scm:git:git://github.com/dingodb/dingo-expr.git"
            developerConnection = "scm:git:ssh://github.com/dingodb/dingo-expr.git"
            url = "https://github.com/dingodb/dingo-expr"
        }
    }
    
    publishToMavenCentral()
    // Conditionally enable signing only for Central tasks
    if (gradle.startParameter.taskNames.any { it.contains('MavenCentral') || it.contains('publishToMavenCentral') }) {
        signAllPublications()
    }
}